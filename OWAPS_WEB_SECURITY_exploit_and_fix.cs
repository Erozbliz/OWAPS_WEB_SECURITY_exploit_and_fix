/*
**********************************
	CORRECTION VULNERABILITEES v1
**********************************
*/


/*
******************************************
INJECTION SQL
-HomeController.cs  -->	 public ActionResult Comments(string comment)
https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
Le test sur Home/Comments: 
'); UPDATE aspnet_Users SET aspnet_Users.UserName = 'zzzz' WHERE aspnet_Users.UserName LIKE '%cc%' ;--
******************************************
*/

//Sensible à l'injection SQL
SqlCommand cmd = new SqlCommand(
    "insert into Comments (UserId, CommentId, Comment) Values ('" + user.ProviderUserKey + "','" + Guid.NewGuid() + "','" + comment + "')",
_dbConnection);
_dbConnection.Open();
cmd.ExecuteNonQuery();


//Empeche les injections SQl (requete paramétrée)
SqlCommand cmd2 = new SqlCommand("INSERT INTO Comments (UserId, CommentId, Comment) VALUES (@ProviderUserKey, @newGuild, @comment);", _dbConnection);
var paramQueries1 = new SqlParameter("@ProviderUserKey", user.ProviderUserKey);
var paramQueries2 = new SqlParameter("@newGuild", Guid.NewGuid());
var paramQueries3 = new SqlParameter("@comment", comment);

cmd2.Parameters.Add(paramQueries1);
cmd2.Parameters.Add(paramQueries2);
cmd2.Parameters.Add(paramQueries3);
_dbConnection.Open();
cmd2.ExecuteNonQuery();


/*
******************************************
XSS : Cross-site scripting
-HomeController.cs -->   public ActionResult Comments(string comment)
https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet
Le test sur Home/Comments: 
<a onmouseover="alert(1)" href="#">Mouse Over</a>
******************************************
*/

//Sensilbe XSS
var paramQueries3 = new SqlParameter("@comment", comment);

//Empeche XSS 1   
var paramQueries3 = new SqlParameter("@comment", Server.HtmlEncode(comment));



/*
******************************************
INJECTION SQL
-HomeController.cs  -->	 public ActionResult Search(string searchData)
https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
Le test sur Home/Comments: 
' OR 1=1 UNION ALL Select Email from aspnet_Membership -- 
******************************************
*/

//Sensible à l'injection SQL
SqlCommand cmd = new SqlCommand("Select Comment from Comments where UserId = '" + user.ProviderUserKey + "' and Comment like '%" + searchData + "%'", _dbConnection);
_dbConnection.Open();
SqlDataReader rd = cmd.ExecuteReader();

//Empeche les injections SQl (requete paramétrée)
 SqlCommand cmd2 = new SqlCommand("Select Comment from Comments where UserId = @ProviderUserKey and Comment like @searchData ;", _dbConnection);
var paramQueries1 = new SqlParameter("@ProviderUserKey", user.ProviderUserKey);
var paramQueries2 = new SqlParameter("@searchData", "%" + searchData + "%");
cmd2.Parameters.Add(paramQueries1);
cmd2.Parameters.Add(paramQueries2);
_dbConnection.Open();
SqlDataReader rd = cmd2.ExecuteReader();





/*
******************************************
EVITER XSS a l'affiche si données corrompue
-HomeController.cs -->   public ActionResult Comments(string comment)
-HomeController.cs  -->	 public ActionResult Search(string searchData)
https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet
Le test sur Home/Search et Home/Comments: 
Soit : 
<a onmouseover="alert(1)" href="#">read this!</a>
Présent en base de donnée affichera
	read this!   //XSS réagira au mouseover
******************************************
*/

//Sensilbe XSS
searchResults.Add(rd.GetString(0));

//Empeche XSS 
searchResults.Add(Server.HtmlEncode(rd.GetString(0)));
//affichera à la place : <a onmouseover="alert(1)" href="#">read this!</a>


/*
******************************************
LIEE A XSS : CSRF (Cross-Site Request Forgery)
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
Le test sur Home/Comments: 
Injecter les scripts ci-dessous 1 par 1
******************************************
*/
///Pour démonstration visuelle
<script>
javascript:function adsql2() {
     alert($("#myvar").val());
    $.ajax({
        url: ResolveUrl("~/home/comments"),
        type: "POST",
        data: { comment: $("#myvar").val()},
    }
    );
}
</script>
<input type="text" id="myvar" name="amount" value="&#x27); UPDATE aspnet_Users SET aspnet_Users.UserName  = &#x27zzz&#x27 WHERE aspnet_Users.UserName LIKE &#x27%c&#x27 ;--  &#x27"/>
<button onclick="adsql2()">UPDATE csrf</button>


//OU
//html a hidden et script js qui charge au chargement de la page (l'utilisateur n'as pas à interagir pour activer la vulnérabilité)
<script>
javascript:function adsql2() {
     alert($("#myvar").val());
    $.ajax({
        url: ResolveUrl("~/home/comments"),
        type: "POST",
        data: { comment: $("#myvar").val()},
    }
    );
}
</script>
<input type="hidden" id="myvar" name="amount" value="&#x27); UPDATE aspnet_Users SET aspnet_Users.UserName  = &#x27zzz&#x27 WHERE aspnet_Users.UserName LIKE &#x27%c&#x27 ;--  &#x27"/>
<body onload="adsql2()">







/*
******************************************
EVITER MAN IN THE MIDDLE
Passage en HTPPS
Selection le projet SansSoussi dans l'exploration VS et appuyer F4
Activer le SSL 
Faire les certificats


Changer dans les propriété->Web l'Url du projet par:
https://localhost:44379/


HSTS : HTTP Strict Transport Security
http://www.hanselman.com/blog/HowToEnableHTTPStrictTransportSecurityHSTSInIIS7.aspx
Redirection automatique, utilise que https
-Web.config
Ajout dans :
<system.webServer> 
<!-- **************** HSTS **************** -->
    <rewrite>
      <rules>
        <rule name="HTTP to HTTPS redirect" stopProcessing="true">
          <match url="(.*)" />
          <conditions>
            <add input="{HTTPS}" pattern="off" ignoreCase="true" />
          </conditions>
          <action type="Redirect" url="https://{HTTP_HOST}/{R:1}"
              redirectType="Permanent" />
        </rule>
      </rules>
      <outboundRules>
        <rule name="Add Strict-Transport-Security when HTTPS" enabled="true">
          <match serverVariable="RESPONSE_Strict_Transport_Security"
              pattern=".*" />
          <conditions>
            <add input="{HTTPS}" pattern="on" ignoreCase="true" />
          </conditions>
          <action type="Rewrite" value="max-age=31536000" />
        </rule>
      </outboundRules>
    </rewrite>
    <!-- **************** HSTS ******************* -->
</system.webServer> 
******************************************
*/




/*
******************************************
Contrôles d'accès

CORS : Cross-origin resource sharing
http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api
NUGET
Install-Package Microsoft.AspNet.WebApi.Cors


******************************************
*/



/*
******************************************
Brute Force Attack (ex: sur login)
https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks

******************************************
*/
